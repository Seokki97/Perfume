plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'jacoco'
}
jacoco {
    toolVersion = "0.8.7"
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.14'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacocoTestReport {

    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false

        // 리포트의 저장 경로를 설정합니다.
        html.destination file("jacoco/jacocoHtml")
        xml.destination file("jacoco/jacoco.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules { // 커버리지의 범위와 퍼센테이지를 설정합니다.
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}
